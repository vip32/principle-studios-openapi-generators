openapi: '3.0.0'
info:
  version: 1.0.0
  title: Shopping API
servers:
  - url: https://localhost:5001

paths:
  /api/v1/shopping/carts/{identity}:
    x-dotnet-mvc-server-controller: Carts
    summary: This resource represents a Cart in the Shopping module
    get:
      summary: Retrieve a cart identified by the identity
      description: Returns a single Cart
      tags:
        - shopping/carts
      operationId: GetByIdentity
      parameters:
        - name: identity
          in: path
          description: User identity
          required: true
          schema:
            type: string
            nullable: false
      responses:
        200:
          description: Resource request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultOfCartDto'
        400:
          description: Resource request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationProblemDetails'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
#      security:
#      - Permissions.Carts.Add: []
#      # - AAA:
#      #     - "Permissions.Carts.Add" # Policy

  /api/v1/shopping/carts/{identity}/items:
    x-dotnet-mvc-server-controller: Carts
    summary: This resource represents a CartItem in the Shopping module
    post:
      summary: Add an item to a cart identified by the identity
      description: Returns a single Cart
      tags:
        - shopping/carts
      operationId: AddItem
      parameters:
        - name: identity
          in: path
          description: User identity
          required: true
          schema:
            type: string
            nullable: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemDto'
        description: The CartItem to add
        required: true
      responses:
        201:
          description: Resource was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultOfCartDto'
        400:
          description: Resource request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationProblemDetails'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
#      security:
#      - Permissions.Carts.Update: []
#      # - JWT:
#      #     - "Permissions.Carts.Update" # Policy

  /api/v1/shopping/carts/{identity}/items/{sku}:
    x-dotnet-mvc-server-controller: Carts
    summary: This resource represents a CartItem with a specific SKU in the Shopping module
    delete:
      summary: Remove an item with a specific SKU from a cart identified by a the identity
      description: Returns a single Cart
      tags:
        - shopping/carts
      operationId: DeleteItem
      parameters:
        - name: identity
          in: path
          description: User identity
          required: true
          schema:
            type: string
            nullable: false
        - name: sku
          in: path
          description: Product SKU
          required: true
          schema:
            type: string
            nullable: false
      responses:
        204:
          description: Resource was deleted successfully.
        400:
          description: Resource request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationProblemDetails'
        401:
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
#      security:
#      - Permissions.Carts.Delete: []
#      # - JWT:
#      #     - "Permissions.Carts.Delete" # Policy

components:
  schemas:
    Result:
      type: object
      required:
        - messages
        - succeeded
      properties:
        messages:
          type: array
          items:
            type: string
        succeeded:
          type: boolean
    ProblemDetails:
      type: object
      required:
        - type
        - title
        - status
        - detail
        - instance
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
    ValidationProblemDetails:
      allOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - type: object
          required:
            - errors
          properties:
            errors:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
    ResultOfCartDto:
      allOf:
        - $ref: '#/components/schemas/Result'
        - type: object
          required:
            - data
          properties:
            data:
              type: object
              $ref: '#/components/schemas/CartDto'
    CartDto:
      type: object
      required:
        - id
        - identity
        - totalPrice
        - items
      properties:
        id:
          type: string
          format: guid
        identity:
          type: string
        totalPrice:
          type: number
          format: double
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemDto'
    CartItemDto:
      type: object
      required:
        - id
        - sku
        - name
        - quantity
        - unitPrice
        - totalPrice
      properties:
        id:
          type: string
          format: guid
        sku:
          type: string
        name:
          type: string
        quantity:
          type: integer
          format: int32
        unitPrice:
          type: number
          format: double
        totalPrice:
          type: number
          format: double

#  # securitySchemes:
#  #   JWT:
#  #     type: apiKey
#  #     description: "Send the JWT token in this format - Request Header: Authorization=Bearer [access_token]"
#  #     name: Authorization
#  #     in: header

#security:
#  # - JWT: []
#  - Permissions.Carts.Add: []
#  - Permissions.Carts.Update: []
#  - Permissions.Carts.Delete: []